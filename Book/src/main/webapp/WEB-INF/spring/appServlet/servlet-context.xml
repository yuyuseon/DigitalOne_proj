<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/assets/**" location="/resources/assets/" />
	<resources mapping="/docs/**" location="/resources/docs/" />
	<resources mapping="/examples/**" location="/resources/examples/" />
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.DigitalOne.Book" />
	
	<!-- 
	컨트롤러에서 비즈니스로직을 수행한후 View를 호출하면 
	ViewResolver가 해당 뷰의 경로를 조립한다. 
	[prefix]                           [suffix]
	"/WEB-INF/views/"+ 컨트롤러반환값 +".jsp"
	위와 같이 조립한후 웹브라우져에 해당 View를 로드한다. 
	컨트롤러는 View를 호출하기 직전에 출력할 내용을 model영역에
	저장한다. 
	 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	
	<!-- SPRING JDBC를 사용하기 위한 커넥션 빈 생성. 
	JAVA파일에서 커넥션 객체를 생성하지 않고 XML설정파일에서 
	생성한후 컨트롤러에서 자동으로 주입받아 사용함. -->
	<beans:bean name="dataSource"
	class="org.springframework.jdbc.datasource.DriverManagerDataSource">		   		
		<beans:property name="driverClassName" 
			value="oracle.jdbc.OracleDriver" />
		<beans:property name="url" 
			value="jdbc:oracle:thin:@localhost:1521:orcl" />
		<beans:property name="username" value="book" />
		<beans:property name="password" value="1234" />
	</beans:bean>
	<beans:bean name="template" 
		class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>
	
	<!-- Mybatis를 사용하기 위한 빈 생성 -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="mapperLocations" value="classpath*:mybatis/mapper/*.xml" />
	</beans:bean>
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg index="0" ref="sqlSessionFactory" />
	</beans:bean>

	
	
</beans:beans>
